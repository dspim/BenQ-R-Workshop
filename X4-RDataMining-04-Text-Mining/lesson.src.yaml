- Class: meta
  Course: StatMLDM
  Lesson: RDataMining-04-Text-Mining
  Author: Wush Wu
  Type: Standard
  Organization: Taiwan R User Group
  Version: 1.0

- Class: text
  Output: 這門課程會跟同學介紹在R 中常用的Text Mining功能。

- Class : cmd_question
  Output: 請同學先安裝套件tm
  CorrectAnswer: check_then_install("tm", "0.6.2")
  AnswerTests: test_package_version("tm", "0.6.2")

- Class : cmd_question
  Output: 接著請同學載入tm套件
  CorrectAnswer: library(tm)
  AnswerTests: test_search_path("tm")

- Class: cmd_question
  Output: tm套件是目前R 中最泛用的Text Mining資料處理工具。
    先請同學查查看tm套件有沒有vignette。
  CorrectAnswer: vignette(package = "tm")
  AnswerTests: omnitest('vignette(package = "tm")')

- Class : cmd_question
  Output: 接著請同學打開名為tm的vignette。
  CorrectAnswer: vignette("tm")
  AnswerTests: omnitest('vignette("tm")')

- Class : text
  Output: 有興趣深入研究tm套件的同學，隨時可以深入閱讀這份文件。

- Class : text
  Output: 在tm套件中，所有的文字資料，都會以文集(Corpus)為單位
    做處理。同學可以先簡單把文集理解為一段有意義的文字，例如文章、
    評論，或是句子。

- Class : cmd_question
  Output: tm套件提供了一些範例資料讓我們可以使用。請同學
    輸入`txt.dir <- system.file("texts", "txt", package = "tm")`
    這裡的system.file函數讓我們可以快速取得套件內附帶的檔案路徑。
  CorrectAnswer: txt.dir <- system.file("texts", "txt", package = "tm")
  AnswerTests: omnitest('txt.dir <- system.file("texts", "txt", package = "tm")')

- Class : cmd_question
  Output: 我們可以使用`dir` 來列出`txt.dir`這個目錄底下的檔案清單。請同學輸入：
    `dir(txt.dir)`
  CorrectAnswer: dir(txt.dir)
  AnswerTests: omnitest("dir(txt.dir)")

- Class : cmd_question
  Output: 我們看到了五個檔案。同學可以用`readLines(file.path(txt.dir, "ovid_1.txt"))`
    來看看第一個檔案的內容。這裡的`file.path`是R 中拿來組合目錄名稱與檔案名稱的函數。
    由於剛剛的檔案是在`txt.dir` 目錄中，而`"ovid_1.txt"`是該目錄的第一個檔案，所以
    要讓R 讀取該檔案，則要利用`file.path` 組合完整的路徑。
  CorrectAnswer: readLines(file.path(txt.dir, "ovid_1.txt"))
  AnswerTests: omnitest('readLines(file.path(txt.dir, "ovid_1.txt"))')

- Class : text
  Output: 根據vignette，這些文章是古羅馬詩Ovid的內容，並不是英文！

- Class : cmd_question
  Output: 是不是英文沒關係。我們可以使用tm的`DirSource`函數來定義資料來源。
    請同學輸入：`src <- DirSource(txt.dir)`
  CorrectAnswer: src <- DirSource(txt.dir)

- Class : cmd_question
  Output: 接著我們使用VCorpus來建立一個文集物件。
    請同學輸入：`ovid <- VCorpus(src)`
  CorrectAnswer: ovid <- VCorpus(src)

- Class : cmd_question
  Output: 讓我們來看看VCorpus物件。請同學輸入：`ovid`
  CorrectAnswer: ovid

- Class : cmd_question
  Output: 一般的`print`方法，並不會顯示`ovid`的內容。
    我們需要使用：`inspect(ovid)`來獲取更詳細的資訊。
    請同學試試看。
  CorrectAnswer: inspect(ovid)

- Class : cmd_question
  Output: 從R console上我們觀察到非常類似list的物件顯示（有兩層的中括號）
    事實上，如果我們想要看文件內容，可以使用：`as.character(ovid[[1]])`
  CorrectAnswer: as.character(ovid[[1]])

- Class : cmd_question
  Output: 接下來我們示範要怎麼使用tm套件進行資料的清理。
    請同學使用`ovid2 <- tm_map(ovid, stripWhitespace)`
  CorrectAnswer: ovid2 <- tm_map(ovid, stripWhitespace)

- Class : cmd_question
  Output: 我們用`as.character(ovid2[[1]])`看看清理後的資料。
    多餘的空白都消失了。
  CorrectAnswer: as.character(ovid2[[1]])

- Class : text
  Output: 這裡`tm_map`函數，就是把stripWhitespace函數套用到所有的ovid
    資料集上。舉例來說，很類似：`ovid2[[1]] <- stripWhitespace(ovid[[1]])`,
    `ovid2[[2]] <- stripWhitespace(ovid[[2]])`, ...
    透過這個tm_map，我們可以很方便的使用各種函數來清理ovid

- Class : cmd_question
  Output: 在做進階的資料處理之前，我們可以把文本轉換成TermDocumentMatrix或是
    DocumentTermMatrix。TermDocumentMatrix會把term當成列，而DocumentTermMatrix
    則是把Term當成欄。請同學試試看：`tdm <- TermDocumentMatrix(ovid2)`
  CorrectAnswer: tdm <- TermDocumentMatrix(ovid2)

- Class : cmd_question
  Output: 我們先看看tdm 的資訊。請輸入`tdm`
  CorrectAnswer: tdm

- Class : text
  Output: 我們看到關於這個TermDocumentMatrix的一些整體資訊。
    諸如我們看到389個term，5 個文件（就是當初看到的五個檔案）
    有興趣的同學可以去研讀tm的vignette獲取更多資訊。

- Class : cmd_question
  Output: 讓我們用`inspect(tdm[1,])`來看看這個矩陣的第一列
  CorrectAnswer: inspect(tdm[1,])

- Class : text
  Output: |
    我們看到一個字在term的下方，而右邊會列出文件的列表，如：ovid_1.txt、
    ovid_2.txt、ovid_3.txt、ovid_4.txt與ovid_1.txt。
    這其實就是TermDocumentMatrix的意思。它利用空格切出terms，然後去紀錄
    每一個terms出現在哪些文件(docuemtns)中的次數。

- Class : text
  Output: 實務上，分析師可以從tdm出發，搭配各種Data Mining或Machine Learning的
    演算法，做出更有趣的應用。

- Class : text
  Output: 以上就是我們對tm套件的簡介。有興趣的同學可以參考
    <https://github.com/wush978/DataScienceAndR/blob/master/slide/get_stupid_clown.R>
    上助教下載和清理ptt 笨版資料的程式碼，來看看如何在R 使用
    tm套件處理中文資料。

- Class : script
  Output: 請同學跟著作業的程式碼，整理一個簡單的文本。完成之後可以輸入`submit()`檢查。
  Script: RDataMining-04-HW.R
  AnswerTests: rdatamining_04_test()
