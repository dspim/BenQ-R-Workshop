- Class: meta
  Course: StatMLDM
  Lesson: RDataMining-01-Association-Rule
  Author: Wush Wu
  Type: Standard
  Organization: Taiwan R User Group
  Version: 1.0
- Class: text
  Output: 這門課程會跟同學介紹在R 中常用的Association Rule算法。
- Class: cmd_question
  Output: 首先請同學安裝arules 這個套件。
  CorrectAnswer: check_then_install("arules", "1.3.0")
  AnswerTests: test_package_version("arules", "1.3.0")
  Hint: check_then_install("arules", "1.3.0")
- Class: cmd_question
  Output: 載入arules套件。
  CorrectAnswer: library(arules)
  AnswerTests: test_search_path("arules")
  Hint: library(arules)
- Class: cmd_question
  Output: 接著，我們查一查arules有沒有vignette。
  CorrectAnswer: vignette(package = "arules")
  AnswerTests: omnitest('vignette(package = "arules")')
  Hint: vignette(package = "arules")
- Class: cmd_question
  Output: 有一篇名叫arules的vignette。麻煩同學先打開它。
  CorrectAnswer: vignette("arules", package = "arules")
  AnswerTests: omnitest('vignette("arules", package = "arules")')
  Hint: vignette("arules", package = "arules")
- Class: text
  Output: 這篇文章仔細的介紹arules套件所提供的演算法、參數，以及提供了範例。 如果想要深入了解apriori演算法的同學，可以花點時間細讀這份文件。
- Class: cmd_question
  Output: 讓我們先看看arules提供的apriori函數。請同學先打開apriori函數的說明頁面。
  CorrectAnswer: ?apriori
  AnswerTests: any_of_exprs("?apriori", "help(apriori)", 'help("apriori")')
  Hint: ?apriori
- Class: mult_question
  Output: 請問下列哪一個「不是」apriori函數的參數？請參考說明文件作答。
  AnswerChoices: data;parameter;appearance;control;confidence
  CorrectAnswer: confidence
  AnswerTests: omnitest(correctVal = "confidence")
- Class: text
  Output: apriori的data參數必須要是transactions型態。所以我們要先探索何謂 transactions型態的物件
- Class: cmd_question
  Output: 請同學輸入：`?"transactions-class"`來打開transactions的說明文件。這裡因為文字中包含 `-`這個符號，所以要用雙引號。
  CorrectAnswer: ?"transactions-class"
  AnswerTests: omnitest('?"transactions-class"')
  Hint: ?"transactions-class"
- Class: mult_question
  Output: 請問transactions物件預設「不能」從哪些物件轉換而來？請參考Details章節作答。
  AnswerChoices: list;matrix;data.frames;numeric vector
  CorrectAnswer: numeric vector
  AnswerTests: omnitest(correctVal = "numeric vector")
- Class: text
  Output: Association Rules要挖掘的，就是透過探索哪些物品(Item)會共同出現在哪些交易(Transaction)中， 而衍生出來的技術。在R
    裡面，我們要透過list、matrix或data.frame來告訴R 這些物品和交易的資訊。
- Class: cmd_question
  Output: 舉例來說，如果我們有三種物品：`c("a", "b", "c")`。而第一筆交易有`c("a", "b", "c")`， 第二筆交易有`c("a",
    "b")`，那我們就可以建立以下的list： `record_list <- list(c("a", "b", "c"), c("a", "b"))` 請同學試試看。
  CorrectAnswer: record_list <- list(c("a", "b", "c"), c("a", "b"))
  AnswerTests: omnitest('record_list <- list(c("a", "b", "c"), c("a", "b"))')
  Hint: record_list <- list(c("a", "b", "c"), c("a", "b"))
- Class: cmd_question
  Output: 有了`record_list`之後，我們可以利用`as`來把`record_list`轉換成transactions物件。 請同學輸入：`record
    <- as(record_list, "transactions")`
  CorrectAnswer: record <- as(record_list, "transactions")
  AnswerTests: omnitest('record <- as(record_list, "transactions")')
  Hint: record <- as(record_list, "transactions")
- Class: cmd_question
  Output: 我們來看看record的結果。請同學輸入：`record`
  CorrectAnswer: record
  AnswerTests: omnitest('record')
  Hint: record
- Class: text
  Output: 我們看到了2 筆交易，因為`length(record_list)`為2 。而且我們看到了3 個物品，它們 是：`c("a", "b", "c")`。
- Class: cmd_question
  Output: R 也提供了`summary`來更仔細的檢視`record`。請同學輸入：`summary(record)`
  CorrectAnswer: summary(record)
  AnswerTests: omnitest('summary(record)')
  Hint: summary(record)
- Class: text
  Output: 我們看到了更多更深入的資訊，例如出現最多次的物品、交易中包含的物品類別的分佈
- Class: cmd_question
  Output: 接著，讓我們看一個真實的範例：AdultUCI資料。請同學輸入：`data(AdultUCI)`
  CorrectAnswer: data(AdultUCI)
  AnswerTests: omnitest("data(AdultUCI)")
  Hint: data(AdultUCI)
- Class: cmd_question
  Output: 也請同學輸入：`?AdultUCI`來看一看arules套件針對這個範例資料的說明。 有興趣的同學可以深入閱讀。
  CorrectAnswer: ?AdultUCI
  AnswerTests: any_of_exprs("?AdultUCI", "help(AdultUCI)", 'help("AdultUCI")')
  Hint: ?AdultUCI
- Class: cmd_question
  Output: 由於AdultUCI 有numeric 型態的欄位，而Association Rule基本上只能使用在類別 型變數，所以我們需要先把AdultUCI作整理，把numeric變成factor，然後用剛剛學
    到的`as` 函數轉換成transactions物件。說明文件的Example區塊有示範怎麼正確的 做資料的整理與轉換。請同學輸入：`example(AdultUCI)`來讓R
    自動幫我們整理資料。
  CorrectAnswer: example(AdultUCI)
  AnswerTests: omnitest("example(AdultUCI)")
  Hint: example(AdultUCI)
- Class: text
  Output: 這裡，我們把描述人的特色，當成「物品」，而把 每個人當成「交易」。透過Association Rule的技術，我們可以回答如：如果一個人的婚姻狀態、工作和
    教育等屬性為何時，資料顯示會比較容易有高收入。**Association Rule的結果不代表因果關係**
- Class: cmd_question
  Output: arules套件已經把Adult資料轉換成transactions物件了。請同學用`class(Adult)`來確認。
  CorrectAnswer: class(Adult)
  AnswerTests: omnitest("class(Adult)", "transactions")
  Hint: class(Adult)
- Class: cmd_question
  Output: 請同學輸入`summary(Adult)`，準備回答下一個問題。
  CorrectAnswer: summary(Adult)
  AnswerTests: omnitest("summary(Adult)")
  Hint: summary(Adult)
- Class: mult_question
  Output: 請問哪一個物品是最頻繁出現的物品？
  AnswerChoices: capital-loss=None;capital-gain=None;native-country=United-States;race=White;workclass=Private
  CorrectAnswer: capital-loss=None
  AnswerTests: omnitest(correctVal = 'capital-loss=None')
- Class: mult_question
  Output: 如果我們計算每筆交易所包含物品的數量，哪一個數字是頻率最高的？
  AnswerChoices: 9;10;11;12;13
  CorrectAnswer: 13
  AnswerTests: omnitest(correctVal = "13")
- Class: cmd_question
  Output: 請同學輸入`inspect(head(Adult, 10))`來看前10筆資料。
  CorrectAnswer: inspect(head(Adult, 10))
  AnswerTests: omnitest('inspect(head(Adult, 10))')
  Hint: inspect(head(Adult, 10))
- Class: cmd_question
  Output: 接著我們再回到apriori函數的說明頁面。
  CorrectAnswer: ?apriori
  AnswerTests: any_of_exprs("?apriori", "help(apriori)", 'help("apriori")')
  Hint: ?apriori
- Class: cmd_question
  Output: 我們請同學先輸入：`rules <- apriori(Adult, parameter = list(support = 0.5, confidence
    = 0.9))`
  CorrectAnswer: rules <- apriori(Adult, parameter = list(support = 0.5, confidence
    = 0.9))
  AnswerTests: omnitest('rules <- apriori(Adult, parameter = list(support = 0.5, confidence
    = 0.9))')
  Hint: rules <- apriori(Adult, parameter = list(support = 0.5, confidence = 0.9))
- Class: text
  Output: 上一題的`parameter = list(support = 0.5, confidence = 0.9)`就是控制aprori演算法 的參數。不同的參數會導致不同的答案。
- Class: cmd_question
  Output: 接著我們來看看學到的結果。請同學輸入：`summary(rules)`
  CorrectAnswer: summary(rules)
  AnswerTests: omnitest('summary(rules)')
  Hint: summary(rules)
- Class: mult_question
  Output: 請問我們一個學到多少個規則？
  AnswerChoices: 52;13;24
  CorrectAnswer: 52
  AnswerTests: omnitest(correctVal = "52")
- Class: cmd_question
  Output: 接著請同學輸入`inspect(rules[1])`來看看第一個規則。
  CorrectAnswer: inspect(rules[1])
  AnswerTests: omnitest('inspect(rules[1])')
  Hint: inspect(rules[1])
- Class: text
  Output: 由於這個規則只有牽涉一個物品，所以它描述的是說 capital-gain=None是一個很常看到的物品。這裡代表的是說， 有91% 的人的capital-gane都是None。
- Class: cmd_question
  Output: 請同學輸入：`inspect(rules[4])`來看看第四個規則。
  CorrectAnswer: inspect(rules[4])
  AnswerTests: omnitest('inspect(rules[4])')
  Hint: inspect(rules[4])
- Class: text
  Output: 這條規則就有歸納出lhs（因）和rhs（果）的關係。 也就是說，擁有一個Full-time的工作的人，資產上通常不會有損失。 support 0.56
    代表的是，同時有lhs + rhs 特性的人，占總資料 的56% 。confidence 0.96則代表所有具備lhs 特性的人，有96% 的 人具備有rhs。lift則代表套用這個規則對rhs
    做預測是否效果良好。 以這個規則來說，有lhs 的人相對沒有lhs 的人，具備rhs 的機率只 高了1.005，算是沒什麼效果的規則。
- Class: cmd_question
  Output: 我們可以運用`subset`指令來挑出我們特別感興趣的規則。 請同學先輸入`?"subset,rules-method"`來打開subset用在rules物件
    上的說明訊息。
  CorrectAnswer: ?"subset,rules-method"
  AnswerTests: omnitest('?"subset,rules-method"')
  Hint: ?"subset,rules-method"
- Class: text
  Output: 我覺得這裡套件開發者在前半段的說明並不算明確。 但是透過閱讀Examples中的範例程式碼，我們仍然可以了解 到不少subset的功能。在學習開放原始碼的程式時，常常會
    發生程式碼或範例比說明文件還清楚的狀況。
- Class: cmd_question
  Output: 我們先試試看：`rules.none <- subset(rules, subset = rhs %in% "capital-gain=None")`
  CorrectAnswer: rules.none <- subset(rules, subset = rhs %in% "capital-gain=None")
  AnswerTests: omnitest('rules.none <- subset(rules, subset = rhs %in% "capital-gain=None")')
  Hint: rules.none <- subset(rules, subset = rhs %in% "capital-gain=None")
- Class: text
  Output: rules.none 應該包含所有rhs 為capital-gain=None的規則。
- Class: cmd_question
  Output: 接著，我們來看篩選出來的`rules.none`包含的第一個規則。 請同學使用`inspect`和`[]`。
  CorrectAnswer: inspect(rules.none[1])
  AnswerTests: omnitest("inspect(rules.none[1])")
  Hint: inspect(rules.none[1])
- Class: cmd_question
  Output: 我們可以再看看篩選出來後，`rules.none`所包含的第二個規則。
  CorrectAnswer: inspect(rules.none[2])
  AnswerTests: omnitest("inspect(rules.none[2])")
  Hint: inspect(rules.none[2])
- Class: text
  Output: 這結果看來很聳動：擁有Full-time工作的人，有93% 的機會 資產是沒有增加的。但是如果同學仔細看的話，會發現lift非常的低， 而且上一個規則才告訴我們capital-gain=None的人非常非常多（92%），
    所以這個規則可能沒什麼意義。
- Class: cmd_question
  Output: 我們可能只對lift很高的規則有興趣。請同學輸入： `rules.none2 <- subset(rules, subset = rhs %in%
    "capital-gain=None" & lift > 1.1)` 篩選所有rhs 為capital-gain=None且lift超過1.1的規則。
  CorrectAnswer: rules.none2 <- subset(rules, subset = rhs %in% "capital-gain=None"
    & lift > 1.1)
  AnswerTests: omnitest('rules.none2 <- subset(rules, subset = rhs %in% "capital-gain=None"
    & lift > 1.1)')
  Hint: rules.none2 <- subset(rules, subset = rhs %in% "capital-gain=None" & lift
    > 1.1)
- Class: text
  Output: 結果資料中學不出任何這樣的規則，哈哈。
- Class: script
  Output: 我們對Association Rule的介紹就到這。最後請同學 完成一個小練習後輸入`submit()`
  Script: RDataMining-03-HW.R
  AnswerTests: rdatamining_03_test()

